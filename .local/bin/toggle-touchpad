#!/bin/sh
# requires:
#   i3:
#     xinput (xorg-xinput, property setting)
#   sway:
#     swaymsg (sway, touchpad information)
#     jq (jq, parse json)
set -e

app_name=${0##*/}
file=${XDG_CACHE_HOME-$HOME/.cache}/touchpad-status
nid_file=${XDG_RUNTIME_DIR-/tmp}/.$app_name.bin.nid
notify=false

true()  { return 0; }
false() { ! true;   }

usage() {
  err=${1-0}
  [ "$err" -eq 0 ] || exec >&2
  echo "Usage: $app_name [-h] [--notify]"
  exit "$err"
}

while [ -n "$1" ]; do
  case $1 in
    --notify) notify=true ;;
    -h) usage ;;
     *) break ;;
  esac
  shift
done

[ $# -gt 0 ] && usage 1

if [ -f "$file" ]; then
  read -r status < "$file"
else
  mkdir -p "${file%/*}"
  if [ -n "$SWAYSOCK" ]; then
    evs=$(swaymsg -t get_inputs |
      jq -r 'first(.[], select(.type=="touchpad")).libinput.send_events')
    [ "$evs" = disabled ] && status=0 || status=1
  else
    setting="Device Enabled"
    tpid=$(xinput list | grep -i touchpad | grep -o 'id=[0-9]*')
    tpid=${tpid#id=}
    [ -n "$tpid" ] || exit
    status=$(xinput list-props "$tpid" | awk -F: '$0 ~ /'"$setting"'/ {print $2}')
  fi
fi

new=$((status^1))

if [ -n "$SWAYSOCK" ]; then
  [ $new -eq 0 ] && cmd=disabled || cmd=enabled
  swaymsg -q "input 'type:touchpad' events $cmd"
else
  xinput set-prop "$tpid" "$setting" $new
fi

echo $new > "$file"

$notify || exit 0

if [ $new -eq 0 ]; then
  urgency=low
  icon=input-touchpad-off
  summary="Touchpad Disabled"
else
  urgency=normal
  icon=input-touchpad-on
  summary="Touchpad Enabled"
fi

notify-send.sh \
  --app-name "$app_name" \
  --urgency $urgency \
  --expire-time 3000 \
  --icon $icon \
  --replace-file "$nid_file" \
  "$summary"
